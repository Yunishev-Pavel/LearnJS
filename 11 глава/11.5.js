// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–æ–≤
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é runSequentially, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö –ø—Ä–æ–º–∏—Å—ã, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
function runSequentially(promise) {
  const result = [];
  const chain = Promise.resolve();
  for (let item of promise) {
    chain = chain
      .then(() => item())
      .then((res) => {
        result.push(res);
      });
  }
  return chain.then(() => result);
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
function asyncTask1() {
  return new Promise((resolve) => setTimeout(() => resolve(1), 1000));
}

function asyncTask2() {
  return new Promise((resolve) => setTimeout(() => resolve(2), 500));
}

function asyncTask3() {
  return new Promise((resolve) => setTimeout(() => resolve(3), 200));
}

runSequentially([asyncTask1, asyncTask2, asyncTask3]).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 3], –Ω–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é groupPromises(promises), –∫–æ—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–º–∏—Å—ã –Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ.
function groupPromises(promises) {
  return Promise.allSettled(promises).then((res) => {
    const resolved = res
      .filter((el) => el.status === "fulfilled")
      .map((el) => el.value);
    const rejected = res
      .filter((el) => el.status === "rejected")
      .map((el) => el.reason);
    return { resolved, rejected };
  });
}

const p1 = Promise.resolve(1);
const p2 = Promise.reject("–û—à–∏–±–∫–∞ 1");
const p3 = Promise.resolve(2);
const p4 = Promise.reject("–û—à–∏–±–∫–∞ 2");

groupPromises([p1, p2, p3, p4]).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: { resolved: [1, 2], rejected: ["–û—à–∏–±–∫–∞ 1", "–û—à–∏–±–∫–∞ 2"] }

// / –¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleWithRetry(fn, retries), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fn –∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É retries —Ä–∞–∑.
async function handleWithRetry(fn, retries) {
  for (let i = 0; i <= retries; i++) {
    try {
      return await fn();
    } catch (err) {
      if (i === retries) throw err;
    }
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
let attempt = 0;
function unstableTask() {
  return new Promise((resolve, reject) => {
    attempt++;
    if (attempt < 3) reject("–û—à–∏–±–∫–∞ " + attempt);
    else resolve("–£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ " + attempt);
  });
}

handleWithRetry(unstableTask, 5).then(console.log).catch(console.error);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ 3"

//   –ó–∞–¥–∞—á–∞ 1. –ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (Promise.all())
// –£ —Ç–µ–±—è –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –µ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetchNumber(), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è.
// –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ

const numbers = [1, 2, 3, 4, 5];

function fetchNumber(num) {
  return new Promise((resolve) => {
    const delay = Math.random() * 3000;
    setTimeout(() => resolve(num), delay);
  });
}

async function fetchAllNumbers(numbers) {
  return await Promise.all(numbers.map(fetchNumber));
}

fetchAllNumbers(numbers).then(console.log); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–∏–º–µ—Ä):[1, 2, 3, 4, 5]

// –ó–∞–¥–∞—á–∞ 2. –ö—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ? (Promise.race())
// –¢—ã –≤—ã–∑—ã–≤–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –Ω–æ —Ç–µ–±–µ –≤–∞–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.

function fetchData1() {
  return new Promise((resolve) => setTimeout(() => resolve("–î–∞–Ω–Ω—ã–µ 1"), 3000));
}

function fetchData2() {
  return new Promise((resolve) => setTimeout(() => resolve("–î–∞–Ω–Ω—ã–µ 2"), 2000));
}

function fetchData3() {
  return new Promise((resolve) => setTimeout(() => resolve("–î–∞–Ω–Ω—ã–µ 3"), 4000));
}

async function getFastestData() {
  return await Promise.race([fetchData1(), fetchData2(), fetchData3()]);
}

getFastestData().then(console.log); //"–î–∞–Ω–Ω—ã–µ 2" (—Ç–∞–∫ –∫–∞–∫ fetchData2 –±—ã—Å—Ç—Ä–µ–µ)

// –ó–∞–¥–∞—á–∞ 3. –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (Promise.any())
// –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—à—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
// –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, —Ç–æ –≤—ã–≤–µ–¥–∏ "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π".

function fetchServer1() {
  return new Promise((resolve, reject) =>
    setTimeout(() => reject("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 1"), 3000)
  );
}

function fetchServer2() {
  return new Promise((resolve, reject) =>
    setTimeout(() => reject("–î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ 2"), 2000)
  );
}

function fetchServer3() {
  return new Promise((resolve, reject) =>
    setTimeout(() => reject("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 3"), 4000)
  );
}

async function getFirstSuccessfulData() {
  try {
    return await Promise.any([fetchServer1(), fetchServer2(), fetchServer3()]);
  } catch {
    console.log("–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π");
  }
}

getFirstSuccessfulData().then(console.log).catch(console.error);

// –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å
// –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é firstResolved(promises), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞.
function firstResolved(promises) {
  return Promise.any(promises);
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const pr1 = new Promise((res, rej) => setTimeout(rej, 500, "–û—à–∏–±–∫–∞ 1"));
const pr2 = new Promise((res) => setTimeout(res, 300, "–£—Å–ø–µ—Ö 2"));
const pr3 = new Promise((res) => setTimeout(res, 700, "–£—Å–ø–µ—Ö 3"));

firstResolved([pr1, pr2, pr3]).then(console.log);
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–£—Å–ø–µ—Ö 2"

// –ó–∞–¥–∞—á–∞ 4. –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤ (Promise.allSettled())
// –¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –¢–µ–±–µ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏ –≤—ã–≤–µ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ.
const requests = [
  () =>
    new Promise((resolve) =>
      setTimeout(() => resolve("–ó–∞–ø—Ä–æ—Å 1: —É—Å–ø–µ—Ö"), 1000)
    ),
  () =>
    new Promise((_, reject) =>
      setTimeout(() => reject("–ó–∞–ø—Ä–æ—Å 2: –æ—à–∏–±–∫–∞"), 2000)
    ),
  () =>
    new Promise((resolve) =>
      setTimeout(() => resolve("–ó–∞–ø—Ä–æ—Å 3: —É—Å–ø–µ—Ö"), 3000)
    ),
  () =>
    new Promise((_, reject) =>
      setTimeout(() => reject("–ó–∞–ø—Ä–æ—Å 4: –æ—à–∏–±–∫–∞"), 4000)
    ),
];

async function fetchAllRequests(requests) {
  const results = await Promise.allSettled(requests.map((req) => req()));

  console.log(
    "‚úÖ –£—Å–ø–µ—Ö–∏:",
    results.filter((r) => r.status === "fulfilled").map((r) => r.value)
  );
  console.log(
    "‚ùå –û—à–∏–±–∫–∏:",
    results.filter((r) => r.status === "rejected").map((r) => r.reason)
  );
}

fetchAllRequests(requests).then(console.log);

// –ó–∞–¥–∞—á–∞ 5. –¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤ (Promise.then())
// –£ —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ, –∂–¥–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ 1.
// –ù–∞–ø–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑–æ–≤–µ—Ç –∏—Ö –∏ –≤–µ—Ä–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
function step1(num) {
  return new Promise((resolve) => setTimeout(() => resolve(num + 1), 1000));
}

function step2(num) {
  return new Promise((resolve) => setTimeout(() => resolve(num + 1), 1000));
}

function step3(num) {
  return new Promise((resolve) => setTimeout(() => resolve(num + 1), 1000));
}

async function processNumber(start) {
  return step1(start).then(step2).then(step3);
}

processNumber(0).then(console.log); // 3

// üîß –ó–∞–¥–∞—á–∞ 1: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π setTimeout
// –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é delay(ms), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å –∏ –∂–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥:
function delay(ms) {
  return new Promise((res) => setTimeout(res, ms));
}
delay(2000).then(() => console.log("–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã"));

// üîß –ó–∞–¥–∞—á–∞ 2: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é loadScript
// –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è <script> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:
// –°–¥–µ–ª–∞–π –ø—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: loadScriptPromise(src), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await.
function loadScript(src, callback) {
  const script = document.createElement("script");
  script.src = src;
  script.onload = () => callback(null, script);
  script.onerror = () => callback(new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"));
  document.head.append(script);
}
async function loadScriptPromise(src) {
  return promisify(loadScript(src))
    .then((script) => console.log("SCRIPPT", script))
    .catch((e) => console.log("ERROR", e));
}

const test = await loadScriptPromise("https://example.com/script.js");

const { error } = require("console");
// üîß –ó–∞–¥–∞—á–∞ 3: –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é —Å Node.js
// –í–æ—Ç –ø—Ä–∏–º–µ—Ä Node.js-—Ñ—É–Ω–∫—Ü–∏–∏:
const fs = require("fs");
const { stream } = require("undici-types");

fs.readFile("example.txt", "utf8", (err, data) => {
  if (err) throw err;
  console.log(data);
});
// üîß –ù–∞–ø–∏—à–∏ promisify, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
function promisify(fn) {
  return function (...args) {
    return new Promise((res, rej) => {
      fn(...args, (err, data) => {
        if (err) rej(err);
        else res(data);
      });
    });
  };
}
const readFilePromise = promisify(fs.readFile);
const content = readFilePromise("example.txt", "utf8")
  .then((data) => console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:", data))
  .catch((err) => console.error("–û—à–∏–±–∫–∞:", err));

// üîß –ó–∞–¥–∞—á–∞ 4: –ù–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ callback
// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –µ—ë —Ç–∞–∫, —á—Ç–æ–±—ã Promise –≤–æ–∑–≤—Ä–∞—â–∞–ª –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ [lat, lng].
// –î–æ–ø—É—Å—Ç–∏–º —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è:

function promisify(fn) {
  return function (...args) {
    return new Promise((res, rej) => {
      fn(...args, (err, ...result) => {
        if (err) rej(err);
        else res(result);
      });
    });
  };
}
function getCoordinates(callback) {
  // callback(null, lat, lng)
  callback(null, 59.9386, 30.3141);
}
const coordinates = promisify1(getCoordinates);
coordinates.then(([lat, lng]) => console.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", lat, lng));

// üîß –ó–∞–¥–∞—á–∞ 5: –ù–∞–ø–∏—à–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é promisify
// –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ promisify, –∫–æ—Ç–æ—Ä–∞—è:
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–¥–∞ f(arg1, arg2..., callback)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é Promise
// –†–∞–±–æ—Ç–∞–µ—Ç —Å callback(err, result)
// –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
function promisify(fn) {
  return function (...args) {
    return new Promise((res, rej) => {
      fn(...args, (err, result) => {
        if (err) rej(err);
        else res(result);
      });
    });
  };
}
const promisifiedFn = promisify(myFunc);
const result = await promisifiedFn(arg1, arg2);
